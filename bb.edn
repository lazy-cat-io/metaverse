{:min-bb-version
 "0.7.4"

 :tasks
 {:requires    ([babashka.fs :as fs]
                [babashka.process :as process]
                [clojure.string :as str]
                [clojure.pprint :as pprint])

  :init        (do
                 (defn get-env [s]
                   (System/getenv s))

                 (defn get-property [s]
                   (System/getProperty s))

                 (defn pretty-print [x]
                   (binding [pprint/*print-right-margin* 130]
                     (pprint/pprint x)))

                 (defn execute [command]
                   (-> command (process/tokenize) (process/process) :out slurp str/trim-newline))

                 (def -zone-id (java.time.ZoneId/of "UTC"))
                 (def -datetime-formatter java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
                 (def -current-timestamp (java.time.ZonedDateTime/now -zone-id))
                 (def -build-timestamp (str (.format -current-timestamp -datetime-formatter)))
                 (def -build-number (let [n (execute "git rev-list HEAD --count")]
                                      (if-not (str/blank? n) n "0")))
                 (def -git-url (execute "git config --get remote.origin.url"))
                 (def -git-branch (execute "git rev-parse --abbrev-ref HEAD"))
                 (def -git-sha (execute "git rev-parse --short HEAD"))

                 (def -release? (= "master" -git-branch))
                 (def -snapshot? (not -release?))
                 (def -deployable? (contains? #{"master" "develop"} -git-branch))

                 (def -version-template (execute "cat version.tmpl"))
                 (def -version (cond-> (str/replace -version-template "{{build-number}}" -build-number)
                                 -snapshot? (str "-SNAPSHOT")))

                 (def -config
                   {:version         -version
                    :build-number    -build-number
                    :build-timestamp -build-timestamp
                    :git-url         -git-url
                    :git-branch      -git-branch
                    :git-sha         -git-sha})

                 (defn as-params [params]
                   (->> params
                     (seq)
                     (flatten)
                     (map (fn [x]
                            (str/replace (pr-str x) (java.util.regex.Pattern/compile "(\".+\")") "'$1'")))
                     (str/join \space)))

                 (defn with-params [command]
                   (->> -config
                     (as-params)
                     (str command " "))))

  :enter       (let [{:keys [doc skip-doc?]
                      :or   {skip-doc? false}} (current-task)]
                 (when (and doc (not skip-doc?))
                   (println (format "â–¸ [metaverse v%s] %s" -version doc))))

  ;;;;
  ;; Tasks
  ;;;;

  version      {:doc       "Show version"
                :skip-doc? true
                :task      (print -version)}

  version:bump {:doc  "Bump version"
                :task (shell (format "npm version %s" -version))}

  config       {:doc       "Show config"
                :skip-doc? true
                :task      (pretty-print -config)}}}
